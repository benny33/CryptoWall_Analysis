encrypted_ip_data = [
    0x9, 0x0, 0x0, 0x0, 0x36, 0x68, 0x65, 0x68, 0x62,
    0x7A, 0x34, 0x66, 0x70, 0x0, 0x77, 0x0, 0x0, 0x0, 0x66,
    0x9D, 0x4E, 0x2F, 0xE1, 0x7D, 0xF4, 0x5D, 0xBE, 0xF0, 0x96,
    0x9E, 0x9, 0x11, 0x7C, 0xA0, 0xB6, 0x56, 0x82, 0xE, 0x66,
    0x49, 0x1D, 0x4D, 0x5E, 0x24, 0xBF, 0xAF, 0x7A, 0xE2, 0x7E,
    0x7D, 0x8C, 0x9C, 0xCE, 0xFB, 0x48, 0xF1, 0x64, 0xF6, 0x98,
    0x49, 0x7E, 0x6B, 0x72, 0x3C, 0x13, 0x9, 0x19, 0xCE, 0xF2,
    0x36, 0xB5, 0x72, 0x1, 0x38, 0xB5, 0x65, 0x86, 0x3F, 0x7B,
    0x6F, 0xB6, 0x1D, 0x11, 0xF9, 0x7A, 0xE1, 0xD9, 0xBF, 0x5B,
    0x6, 0xEC, 0x64, 0x15, 0x63, 0x7A, 0x53, 0x8A, 0xE3, 0x29,
    0xBE, 0xB2, 0x57, 0x46, 0xA9, 0x49, 0xBD, 0xC6, 0xAD, 0x37,
    0x73, 0x93, 0x9B, 0xAA, 0x2, 0x23, 0xE4, 0x57, 0xD4, 0x7A,
    0x48, 0x38, 0x36, 0xD2, 0x8E, 0xE3, 0xC6, 0x81, 0x9C, 0xE9,
    0xDC, 0x5A, 0x48, 0xB1, 0x75, 0xD9, 0xBA, 0xFB
]

def GrabPlaintextPassword(string_buffer):
    buf = ""
    password = string_buffer[4:13]
    for i in range(len(password)):
        buf += chr(password[i])
    return buf

def Generate256ByteKeyFromPlaintext(plaintext_password):
    generated_buffer = b''

    tmp_buffer = bytearray()
    for i in range(256):
        tmp_buffer += bytes([i])

    z = 0
    n = 0
    for j in range(256):
        z = (z + ord(plaintext_password[n]) + (tmp_buffer[j])) % 256
        y = tmp_buffer[j]
        tmp_buffer[j] = tmp_buffer[z]
        tmp_buffer[z] = y
        n = (n + 1) % 9
    generated_buffer = tmp_buffer
    return generated_buffer

def DecryptRemainingBytes(encrypted_arr, key_bytes):
    remaining_bytes = encrypted_arr[18:]
    result = ''

    n = 0
    y = 0
    for i in range(len(remaining_bytes)):
        n += 1
        y += key_bytes[n]
        z = key_bytes[n]
        key_bytes[n] = key_bytes[y%256]
        key_bytes[y%256] = z
        #print(hex(key_bytes[(key_bytes[y%256] + key_bytes[n]) % 256]), hex(remaining_bytes[i]))
        result += chr((key_bytes[(key_bytes[y%256] + key_bytes[n]) % 256]) ^ remaining_bytes[i])

    return result

def main():
    password = GrabPlaintextPassword(encrypted_ip_data)
    print("[+] Got plaintext key: {}\n".format(password))

    key_bytes = Generate256ByteKeyFromPlaintext(password)
    print("[+] Generated key bytes from plaintext:\n{}\n".format(key_bytes))

    ip_addr = DecryptRemainingBytes(encrypted_ip_data, key_bytes)
    print("Decrypted data:")
    for i in range(0, len(ip_addr), 24):
        print(ip_addr[i:i+24])

if __name__ == '__main__':
    main()
